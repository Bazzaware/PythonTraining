11 Inheritance, Super and the MRO
==================================


Inheritance for "is a" Relationship
-----------------------------------

Once place where type checking is built into the language, and "is-a" relationships are
particularly important, is exception handling. The ``except`` part of a ``try...except``
block checks the type of the exception.

.. code-block:: pycon

    >>> try:
    ...     123 + "not a number"
    ... except TypeError:
    ...     print("This is totally ok")
    ...
    This is totally ok
    >>> try:
    ...     123 + "not a number"
    ... except NameError:
    ...     print("This probably won't work")
    ...
    Traceback (most recent call last):
      File "<stdin>", line 2, in <module>
    TypeError: unsupported operand type(s) for +: 'int' and 'str'

It's normal for libraries and frameworks to provide their own exception type(s), which
you can then catch in your own code. This is done by subclassing the built in ``Exception``
type:

.. code-block:: pycon

    >>> class NewException(Exception):
    ...     pass
    ...
    >>> try:
    ...     raise NewException("An important message")
    ... except NewException as e:
    ...     print("Caught exception: {!r}".format(e))
    ...
    Caught exception: NewException('An important message',)

By inheriting from ``Exception`` you inherit the default constructor which takes a
message as an argument.


Inheritance for Code Reuse
--------------------------

One of the most common and effective reasons to use inheritance is for simple code
re-use. It is common for frameworks or libraries to provide a base class for users
to inherit from and extend.

Both ``NetworkSource`` and ``FileSource`` shared a whole chunk of code in common.
Although they fetched the data in different ways they both handled lines of data
the same and created ``Location`` instances in the same way.

Can you create a new ``Source`` base class, that provides a ``_handle_lines`` method,
for both ``FileSource`` and ``NetworkSource`` to subclass and use?

The subclasses will look something like this:

.. code-block:: python

    class FileSource(Source):
        def __init__(self, filename):
            self.filename = filename

        def fetch(self):
            with open(self.filename) as h:
                return self._handle_lines(h)


    class NetworkSource(Source):
        def __init__(self, url):
            self.url = url

        def fetch(self):
            response = requests.get(self.url)
            if response.status_code != 200:
                raise Exception("url {!r} failed with status code {}".format(self.url, response.status_code))
            lines = response.text.splitlines()
            return self._handle_lines(lines)



The directions of inheritance
-----------------------------

Python has two different "directions" of inheritance. The first is found in the concept
of "single inheritance" where a series of classes inherit from a single parent. For
example, try this example:

.. code-block:: pycon

    >>> class A(object):
            def spam(self):
                print('A.spam')

    >>> class B(A):
            def spam(self):
                print('B.spam')
                super().spam()

    >>> class C(B):
            def spam(self):
                print('C.spam')
                super().spam()


    >>> C.__mro__
    (<class '__main__.C'>, <class '__main__.B'>, <class '__main__.A'>, <class 'object'>)
    >>> c = C()
    >>> c.spam()
    C.spam
    B.spam
    A.spam
    >>>

Observe that the __mro__ attribute of class C encodes all of its ancestors in order. When
you invoke the spam() method, it walks the MRO class-by-class up the hierarchy.

With multiple inheritance, you get a different kind of inheritance that allows different
classes to be composed together. Try this example:

.. code-block:: pycon

    >>> class Base(object):
            def spam(self):
                print('Base.spam')

    >>> class X(Base):
            def spam(self):
                print('X.spam')
                super().spam()

    >>> class Y(Base):
            def spam(self):
                print('Y.spam')
                super().spam()

    >>> class Z(Base):
            def spam(self):
                print('Z.spam')
                super().spam()

    >>>

Notice that all of the classes above inherit from a common parent Base. However, the
classes X, Y, and Z are not directly related to each other (there is no inheritance
chain linking those classes together).

However, watch what happens in multiple inheritance:


.. code-block:: pycon

    >>> class M(X,Y,Z):
            pass

    >>> M.__mro__
    (<class '__main__.M'>, <class '__main__.X'>, <class '__main__.Y'>, <class '__main__.Z'>, <class '__main__.Base'>, <class 'object'>)
    >>> m = M()
    >>> m.spam()
    X.spam
    Y.spam
    Z.spam
    Base.spam
    >>>

Here, you see all of the classes stack together in the order supplied by the subclass.
Suppose the subclass rearranges the class order:

.. code-block:: pycon

    >>> class N(Z,Y,X):
            pass

    >>> N.__mro__
    (<class '__main__.N'>, <class '__main__.Z'>, <class '__main__.Y'>, <class '__main__.X'>, <class '__main__.Base'>, <class 'object'>)
    >>> n = N()
    >>> n.spam()
    Z.spam
    Y.spam
    X.spam
    Base.spam
    >>>

Here, you see the order of the parents flip around. Carefully pay attention to what
super() is doing in both cases. It doesn’t delegate to the immediate parent of each
class—instead, it moves to the next class on the MRO. Not only that, the exact order is
controlled by the child. This is pretty weird.

Also notice that the common parent Base serves to terminate the chain of super()
operations. Specifically, the Base.spam() method does not call any further methods. It
also appears at the end of the MRO since it is the parent to all of the classes being
composed together.


Build a Value Checker
---------------------

Let's play with the idea of type validation by creating some mixin classes and see how
they cooperate with multiple inheritance.

.. code-block:: python

    # validate.py
    class Validator(object):
        @classmethod
        def check(cls, value):
            return value

Now, let’s make some classes for type checking:

.. code-block:: python

    class Typed(Validator):
        expected_type = object
        @classmethod
        def check(cls, value):
            if not isinstance(value, cls.expected_type):
                raise TypeError(f'Expected {cls.expected_type}')
            return super().check(value)

    class Integer(Typed):
        expected_type = int

    class Float(Typed):
        expected_type = float

    class String(Typed):
        expected_type = str

Here’s how you use these classes (Note: the use of @classmethod allows us to avoid the
extra step of creating instances which we don’t really need):

.. code-block:: pycon

    >>> Integer.check(10)
    10
    >>> Integer.check('10')
    Traceback (most recent call last):
      File "<stdin>", line 1, in check
        raise TypeError(f'Expected {cls.expected_type}')
    TypeError: Expected <class 'int'>
    >>> String.check('10')
    '10'
    >>>

You could use the validators in a function. For example:

.. code-block:: pycon

    >>> def add(x, y):
            Integer.check(x)
            Integer.check(y)
            return x + y

    >>> add(2, 2)
    4
    >>> add('2', '3')
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
      File "<stdin>", line 2, in add
      File "validate.py", line 11, in check
        raise TypeError(f'Expected {cls.expected_type}')
    TypeError: Expected <class 'int'>
    >>>

Now, make some more classes for different kinds of domain checking:

.. code-block:: python

    class Positive(Validator):
        @classmethod
        def check(cls, value):
            if value < 0:
                raise ValueError('Expected >= 0')
            return super().check(value)

    class NonEmpty(Validator):
        @classmethod
        def check(cls, value):
            if len(value) == 0:
                raise ValueError('Must be non-empty')
            return super().check(value)

Where is all of this going? Let’s start composing classes together with multiple
inheritance like toy blocks:

.. code-block:: python

    class PositiveInteger(Integer, Positive):
        pass

    class PositiveFloat(Float, Positive):
        pass

    class NonEmptyString(String, NonEmpty):
        pass

Essentially, you’re taking existing validators and composing them together into new ones. Madness! However, let’s use them to validate some things now:

.. code-block:: pycon

    >>> PositiveInteger.check(10)
    10
    >>> PositiveInteger.check('10')
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
        raise TypeError(f'Expected {cls.expected_type}')
    TypeError: Expected <class 'int'>
    >>> PositiveInteger.check(-10)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
        raise ValueError('Expected >= 0')
    ValueError: Must be >= 0


    >>> NonEmptyString.check('hello')
    'hello'
    >>> NonEmptyString.check('')
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
        raise ValueError('Must be non-empty')
    ValueError: Must be non-empty
    >>>

At this point, your head is probably fully exploded. However, the problem of composing
different bits of code together is one that arises in real-world programs. Cooperative
multiple inheritance is one of the tools that can be used to organize it.