3. Functions
============

Functions are the basic bulding block of resuable code. They allow us to reuse code code without having to duplicate code everywhere.For examle writing similar files out with different filenames or perform the same kinds of data processing with slightly different input.

Python comes with a whole bunch of useful functions available to you. Some of those are built-in (like ``dir`` which we've used) and some are in the parts of Python called the standard library. This is a series of modules, libraries, available to you to import and use in your code. This is why describe Python as coming "batteries included". For example the ``sin`` and ``cos`` functions from the ``math`` module:

.. code-block:: pycon

  >>> import math
  >>> math.sin(90)
  0.8939966636005579

``sin`` is a function that lives inside the math module. It takes one argument, performs a calculation and returns a result. It's way more convenient to have this function available to us for re-use rather than having to repeat the calculation everywhere we need to use it.

Python functions are very easy to create. They start with the ``def`` keyword followed by the function name, then any parameters they take inside parentheses and a colon to indicate that they start a new block. The parameters become local variables that only live *inside the body of the function*. When the calculation is done the function can (optionally) return one or more results:

.. code-block:: python

  def name(argument1, argument2):
      result = argument1 + argument2
      return result

Once defined the function can be called multiple times with different values:

.. code-block:: pycon

  >>> name(1, 3)
  4
  >>> name("hello", "goodbye")
  "hellogoodbye"

The really interesting thing is that the variables defined inside the function only live inside the function and don't affect variables with the same name outside the function. Variables inside the function are said to have "local scope" (they live locally in the function) and ones outside the function have "global scope". Functions can use (but not change) global variables, but outside the function we can't use local variables.

.. code-block:: pycon

  >>> argument1 = "fish"
  >>> name(1, 7)
  8
  >>> argument1
  "fish"

Some functions do things (called side-effects) but don't necessarily return values. A return statement on its own, or even a function that drops off the end with no return statement at all has an implicit return value called ``None``. ``None`` is often used as a placeholder value to represent nothing. Often used to initialise variables that will be filled in later. These three functions are exactly equivalent. Try playing with ``None`` at the interactive interpreter and see what you can do with it (hint: not much). If you've heard of "null pointer exceptions" in other languages Python lets you do the same terrible things with ``None``. It really does make a very convenient placeholder at times though.

.. code-block:: python

  def function(argument):
      print(argument)
      return

  def function(argument):
      print(argument)

  def functin(argument):
      print(argument)
      return None

Functions can also return more than one value:

.. code-block:: python

  def function(argument):
      return argument + 1, argument -1

.. code-block:: pycon

  >>> result1, result2 = function(6)
  >>> result1
  7
  >>> result2
  5

